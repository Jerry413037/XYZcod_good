<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32\52352\Obj\HT32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32\52352\Obj\HT32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Nov 16 20:34:53 2020
<BR><P>
<H3>Maximum Stack Usage =       1192 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ACSII_format_UART &rArr; __2snprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[59]">Delay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">Delay</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">ADC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[14]">BFTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[15]">BFTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[23]">BootProcess</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[d]">COMP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[9]">EVWUP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[11]">GPTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[10]">GPTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f5xxxx_01_it.o(i.HardFault_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[16]">I2C0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1f]">I2S_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[6]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[f]">MCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f5xxxx_01_it.o(i.NMI_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[21]">PDMA_CH0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[22]">PDMA_CH2_5_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from ht32f5xxxx_01_it.o(i.PendSV_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2a]">Reset_Handler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1e]">SCI_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[12]">SCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[13]">SCTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[18]">SPI0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[19]">SPI1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from ht32f5xxxx_01_it.o(i.SVC_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from ht32f5xxxx_01_it.o(i.SysTick_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_ht32f5xxxx_01.o(i.SystemInit) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1c]">UART0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1d]">UART1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1a]">USART0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1b]">USART1_IRQHandler</a> from ht32f5xxxx_01_it.o(i.USART1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[20]">USB_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[25]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[28]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[29]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[27]">fputc</a> from ht32_retarget.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2a]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))

<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[14]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1f]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>MIDI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[21]"></a>PDMA_CH0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PDMA_CH2_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[2f]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[30]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SCTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SCTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[32]"></a>SCTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[18]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[34]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1a]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[35]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_UART
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_PC
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBiot_check
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBiot_TIMER
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_MQTT
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_UART
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_PC
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_UART
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_PC
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[43]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_UART
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_PC
</UL>

<P><STRONG><a name="[46]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_UART
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_PC
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[36]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[a8]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[a9]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>ACSII_format_PC</STRONG> (Thumb, 626 bytes, Stack size 1080 bytes, main.o(i.ACSII_format_PC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = ACSII_format_PC &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>ACSII_format_UART</STRONG> (Thumb, 648 bytes, Stack size 1080 bytes, main.o(i.ACSII_format_UART))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = ACSII_format_UART &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>AFIO_GPxConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, ht32f5xxxx_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxART_Configuration
</UL>

<P><STRONG><a name="[48]"></a>AT_MQTT</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, main.o(i.AT_MQTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT_MQTT &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>AT_Time</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(i.AT_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AT_Time &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBiot_check
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBiot_TIMER
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>CKCU_GetClocksFrequency</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetClocksFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPLLFrequency
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
</UL>

<P><STRONG><a name="[4e]"></a>CKCU_GetPLLFrequency</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPLLFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[50]"></a>CKCU_GetPeripFrequency</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPeripFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[79]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, ht32f5xxxx_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxART_Configuration
</UL>

<P><STRONG><a name="[51]"></a>Config_Descriptor</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, descr.o(i.Config_Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Config_Descriptor &rArr; Get_Descriptor &rArr; setuppackage &rArr; setup &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_1
</UL>

<P><STRONG><a name="[54]"></a>Config_Descriptor_1</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, descr_1.o(i.Config_Descriptor_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Config_Descriptor_1 &rArr; Get_Descriptor_1 &rArr; setuppackage_1 &rArr; setup_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor_1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host_1
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_2
</UL>

<P><STRONG><a name="[57]"></a>DEVICE_Descriptor</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, descr.o(i.DEVICE_Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DEVICE_Descriptor &rArr; Get_Descriptor &rArr; setuppackage &rArr; setup &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_1
</UL>

<P><STRONG><a name="[58]"></a>DEVICE_Descriptor_1</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, descr_1.o(i.DEVICE_Descriptor_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DEVICE_Descriptor_1 &rArr; Get_Descriptor_1 &rArr; setuppackage_1 &rArr; setup_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor_1
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_2
</UL>

<P><STRONG><a name="[59]"></a>Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, delay.o(i.Delay))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_set_1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_port_1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor_1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_host_port
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_inout
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_port
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host_1
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host_1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_host_port_1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_inout_1
</UL>

<P><STRONG><a name="[44]"></a>Delayms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, delay.o(i.Delayms))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBiot_check
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBiot_TIMER
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Time
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_MQTT
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_UART
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_PC
</UL>

<P><STRONG><a name="[8a]"></a>Delayus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, delay.o(i.Delayus))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_set_1
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_reset_1
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_reset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host_1
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_init_1
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_init
</UL>

<P><STRONG><a name="[72]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_inout
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_inout_1
</UL>

<P><STRONG><a name="[92]"></a>GPIO_InputConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_inout
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_inout_1
</UL>

<P><STRONG><a name="[7b]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_inout
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxART_Configuration
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_inout_1
</UL>

<P><STRONG><a name="[93]"></a>GPIO_ReadInBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>Get_Descriptor</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, sl811hs.o(i.Get_Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Get_Descriptor &rArr; setuppackage &rArr; setup &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setuppackage
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outpackage
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpackage
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ctl_length
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_Descriptor
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Descriptor
</UL>

<P><STRONG><a name="[55]"></a>Get_Descriptor_1</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, sl811hs_1.o(i.Get_Descriptor_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Get_Descriptor_1 &rArr; setuppackage_1 &rArr; setup_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpackage_1
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setuppackage_1
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outpackage_1
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ctl_length_1
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_Descriptor_1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Descriptor_1
</UL>

<P><STRONG><a name="[60]"></a>Get_HID_data_Z</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, descr_1.o(i.Get_HID_data_Z))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_HID_data_Z &rArr; inpackage_1 &rArr; in_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpackage_1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host_1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host_1
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>Get_HID_data_x</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, descr.o(i.Get_HID_data_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_HID_data_x &rArr; inpackage &rArr; in &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpackage
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>Get_HID_data_y</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, descr.o(i.Get_HID_data_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_HID_data_y &rArr; inpackage &rArr; in &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpackage
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>Get_ctl_length</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, descr.o(i.Get_ctl_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Get_ctl_length &rArr; Get_Descriptor &rArr; setuppackage &rArr; setup &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_1
</UL>

<P><STRONG><a name="[66]"></a>Get_ctl_length_1</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, descr_1.o(i.Get_ctl_length_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Get_ctl_length_1 &rArr; Get_Descriptor_1 &rArr; setuppackage_1 &rArr; setup_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor_1
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_2
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>NBiot_TIMER</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, main.o(i.NBiot_TIMER))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NBiot_TIMER
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Time
</UL>

<P><STRONG><a name="[4b]"></a>NBiot_check</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.NBiot_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NBiot_check
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Time
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PWRCU_CheckReadyAccessed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_pwrcu.o(i.PWRCU_CheckReadyAccessed))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxART_Configuration
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>SERIAL_PutChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32_serial.o(i.SERIAL_PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Set_Address</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sl811hs.o(i.Set_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Set_Address &rArr; setuppackage &rArr; setup &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setuppackage
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpackage
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_1
</UL>

<P><STRONG><a name="[68]"></a>Set_Address_1</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sl811hs_1.o(i.Set_Address_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Set_Address_1 &rArr; setuppackage_1 &rArr; setup_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpackage_1
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setuppackage_1
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_2
</UL>

<P><STRONG><a name="[69]"></a>Set_Config</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, descr.o(i.Set_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Set_Config &rArr; setuppackage &rArr; setup &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setuppackage
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpackage
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_1
</UL>

<P><STRONG><a name="[6a]"></a>Set_Config_1</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, descr_1.o(i.Set_Config_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Set_Config_1 &rArr; setuppackage_1 &rArr; setup_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpackage_1
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setuppackage_1
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_2
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, system_ht32f5xxxx_01.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USART1_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, ht32f5xxxx_01_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>USART_GetIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>USART_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ht32f5xxxx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxART_Configuration
</UL>

<P><STRONG><a name="[6f]"></a>USART_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxART_Configuration
</UL>

<P><STRONG><a name="[6c]"></a>USART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>USART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>USART_TxRxCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_TxRxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxART_Configuration
</UL>

<P><STRONG><a name="[71]"></a>USB_HOST_SET_1</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, main.o(i.USB_HOST_SET_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USB_HOST_SET_1 &rArr; Get_ctl_length &rArr; Get_Descriptor &rArr; setuppackage &rArr; setup &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_HID_IN_endpoint
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Address
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ctl_length
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_Descriptor
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Descriptor
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>USB_HOST_SET_2</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, main.o(i.USB_HOST_SET_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USB_HOST_SET_2 &rArr; Get_ctl_length_1 &rArr; Get_Descriptor_1 &rArr; setuppackage_1 &rArr; setup_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host_1
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_init_1
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_HID_IN_endpoint_1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Config_1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Address_1
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ctl_length_1
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_Descriptor_1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Descriptor_1
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>UxART_Configuration</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, main.o(i.UxART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UxART_Configuration &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_CheckReadyAccessed
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[aa]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[49]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_1
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Time
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_MQTT
</UL>

<P><STRONG><a name="[80]"></a>__0snprintf$8</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ab]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[45]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_UART
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_PC
</UL>

<P><STRONG><a name="[81]"></a>__0sprintf$8</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ac]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[42]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_UART
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_PC
</UL>

<P><STRONG><a name="[4f]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht32f5xxxx_ckcu.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[ad]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ae]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[af]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[84]"></a>commandloop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sl811hs.o(i.commandloop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_go
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in
</UL>

<P><STRONG><a name="[86]"></a>commandloop_1</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sl811hs_1.o(i.commandloop_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_go_1
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_1
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_1
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_1
</UL>

<P><STRONG><a name="[27]"></a>fputc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ht32_retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[74]"></a>get_HID_IN_endpoint</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sl811hs.o(i.get_HID_IN_endpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_HID_IN_endpoint &rArr; rd_host &rArr; read_host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_1
</UL>

<P><STRONG><a name="[77]"></a>get_HID_IN_endpoint_1</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sl811hs_1.o(i.get_HID_IN_endpoint_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_HID_IN_endpoint_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host_1
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_2
</UL>

<P><STRONG><a name="[85]"></a>host_go</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sl811hs.o(i.host_go))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandloop
</UL>

<P><STRONG><a name="[87]"></a>host_go_1</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sl811hs_1.o(i.host_go_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host_1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host_1
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandloop_1
</UL>

<P><STRONG><a name="[73]"></a>host_init</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, sl811hs.o(i.host_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = host_init &rArr; host_reset &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_reset
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_1
</UL>

<P><STRONG><a name="[76]"></a>host_init_1</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, sl811hs_1.o(i.host_init_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = host_init_1 &rArr; host_reset_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_set_1
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_reset_1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host_1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host_1
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_2
</UL>

<P><STRONG><a name="[8e]"></a>host_port</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, sl811hs.o(i.host_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host
</UL>

<P><STRONG><a name="[8f]"></a>host_port_1</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, sl811hs_1.o(i.host_port_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = host_port_1
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host_1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host_1
</UL>

<P><STRONG><a name="[8b]"></a>host_reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sl811hs.o(i.host_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = host_reset &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_init
</UL>

<P><STRONG><a name="[8d]"></a>host_reset_1</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sl811hs_1.o(i.host_reset_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = host_reset_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host_1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host_1
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_init_1
</UL>

<P><STRONG><a name="[89]"></a>host_set</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sl811hs.o(i.host_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = host_set
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_init
</UL>

<P><STRONG><a name="[8c]"></a>host_set_1</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, sl811hs_1.o(i.host_set_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = host_set_1
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_init_1
</UL>

<P><STRONG><a name="[90]"></a>in</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sl811hs.o(i.in))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = in &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandloop
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpackage
</UL>

<P><STRONG><a name="[91]"></a>in_1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sl811hs_1.o(i.in_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = in_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandloop_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpackage_1
</UL>

<P><STRONG><a name="[5b]"></a>inpackage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sl811hs.o(i.inpackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inpackage &rArr; in &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Address
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HID_data_y
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HID_data_x
</UL>

<P><STRONG><a name="[5e]"></a>inpackage_1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sl811hs_1.o(i.inpackage_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inpackage_1 &rArr; in_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host_1
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor_1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Config_1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Address_1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HID_data_Z
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 334 bytes, Stack size 80 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = main &rArr; ACSII_format_UART &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HID_data_y
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HID_data_x
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HID_data_Z
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxART_Configuration
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_1
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Time
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_MQTT
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_UART
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACSII_format_PC
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[94]"></a>out</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sl811hs.o(i.out))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = out &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandloop
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outpackage
</UL>

<P><STRONG><a name="[95]"></a>out_1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sl811hs_1.o(i.out_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = out_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandloop_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outpackage_1
</UL>

<P><STRONG><a name="[5c]"></a>outpackage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sl811hs.o(i.outpackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = outpackage &rArr; out &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor
</UL>

<P><STRONG><a name="[5f]"></a>outpackage_1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sl811hs_1.o(i.outpackage_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = outpackage_1 &rArr; out_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host_1
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_1
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor_1
</UL>

<P><STRONG><a name="[96]"></a>port_inout</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, sl811hs.o(i.port_inout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = port_inout
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host
</UL>

<P><STRONG><a name="[97]"></a>port_inout_1</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, sl811hs_1.o(i.port_inout_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host_1
</UL>

<P><STRONG><a name="[53]"></a>rd_host</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sl811hs.o(i.rd_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rd_host &rArr; read_host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_host_port
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_inout
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_port
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_reset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_go
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_HID_IN_endpoint
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HID_data_y
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HID_data_x
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Descriptor
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_1
</UL>

<P><STRONG><a name="[56]"></a>rd_host_1</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sl811hs_1.o(i.rd_host_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_port_1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_host_port_1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_inout_1
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_reset_1
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_go_1
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_init_1
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_HID_IN_endpoint_1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HID_data_Z
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Descriptor_1
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_SET_2
</UL>

<P><STRONG><a name="[98]"></a>read_host_port</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, sl811hs.o(i.read_host_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host
</UL>

<P><STRONG><a name="[99]"></a>read_host_port_1</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, sl811hs_1.o(i.read_host_port_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_host_port_1
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_host_1
</UL>

<P><STRONG><a name="[9a]"></a>setup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sl811hs.o(i.setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setup &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandloop
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setuppackage
</UL>

<P><STRONG><a name="[9b]"></a>setup_1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sl811hs_1.o(i.setup_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setup_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandloop_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setuppackage_1
</UL>

<P><STRONG><a name="[5a]"></a>setuppackage</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, sl811hs.o(i.setuppackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = setuppackage &rArr; setup &rArr; commandloop &rArr; host_go &rArr; wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Address
</UL>

<P><STRONG><a name="[5d]"></a>setuppackage_1</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, sl811hs_1.o(i.setuppackage_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = setuppackage_1 &rArr; setup_1 &rArr; commandloop_1 &rArr; host_go_1 &rArr; rd_host_1 &rArr; port_inout_1
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_host_1
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_1
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Descriptor_1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Config_1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Address_1
</UL>

<P><STRONG><a name="[63]"></a>wr_host</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, sl811hs.o(i.wr_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wr_host &rArr; host_port
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_port
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setuppackage
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outpackage
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpackage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_reset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_go
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HID_data_y
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HID_data_x
</UL>

<P><STRONG><a name="[61]"></a>wr_host_1</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, sl811hs_1.o(i.wr_host_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wr_host_1 &rArr; host_port_1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_port_1
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpackage_1
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_reset_1
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_go_1
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_init_1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HID_data_Z
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setuppackage_1
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outpackage_1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[23]"></a>BootProcess</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[83]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[82]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[28]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL>
<P><STRONG><a name="[29]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
